@page "/"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@inject IAuthService AuthService
<div>
    <h1 class="text-center mt-4">Academia de Programación Online</h1>

    <div class="container mt-4">
        <div class="row">
            <div class="col-md-8 border border-3 rounded">
                <img class="m-3 rounded"
                    src="https://kinsta.com/es/wp-content/uploads/sites/8/2021/12/back-end-developer-1024x512.png"
                    alt="" height="200vw" srcset="">
                <h2>¡Aprende a programar!</h2>
                <p>
                    Bienvenido a nuestra academia online de programación. Ofrecemos una amplia variedad de cursos
                    impartidos por expertos en la industria.
                    Ya sea que estés buscando aprender los fundamentos o mejorar tus habilidades existentes, tenemos
                    cursos para ti.
                </p>
                <p>
                    Nuestros cursos están diseñados para brindarte conocimientos prácticos y experiencia práctica que te
                    ayudarán a alcanzar tus metas en el mundo de la programación.
                </p>
                <!-- seccion del carrousel -->
                <div class="mt-3 mb-4">
                    <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                        <ol class="carousel-indicators">
                            @for (int i = 0; i < imageUrls.Count; i++)
                            {
                                <li data-target="#carouselExampleIndicators" data-slide-to="@i"
                                    class="@((i == 0) ? "active" : "")"></li>
                            }
                        </ol>
                        <div class="carousel-inner">
                            @for (int i = 0; i < imageUrls.Count; i++)
                            {
                                <div class="carousel-item @(i == 0 ? "active" : "")">
                                    <img class="d-block w-100" src="@imageUrls[i]" alt="Slide @(i + 1)">
                                </div>
                            }
                        </div>
                        <a class="carousel-control-prev" role="button"
                            data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" role="button"
                            data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                </div>
            </div>
            <!--seccion register-->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h3 class="card-title">Regístrate Ahora</h3>
                        <EditForm Model="@registerModel" OnValidSubmit="@RegisterUser">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <InputText @bind-Value="registerModel.Nombre" class="form-control"
                                    placeholder="Nombre" />
                                <ValidationMessage For="@(() => registerModel.Nombre)" />
                            </div>
                            <div class="mb-3">
                                <InputText @bind-Value="registerModel.Correo" class="form-control"
                                    placeholder="Correo Electrónico" />
                                <ValidationMessage For="@(() => registerModel.Correo)" />
                            </div>
                            <div class="mb-3">
                                <InputText @bind-Value="registerModel.Password" class="form-control"
                                    placeholder="Contraseña" type="password" />
                                <ValidationMessage For="@(() => registerModel.Password)" />
                            </div>
                            <button type="submit" class="btn btn-primary btn-block">Registrarse</button>
                        </EditForm>
                    </div>
                </div>
                @if (registroExitoso)
                {
                    <div class="alert alert-success" role="alert">
                        Registro exitoso. ¡Enhorabuena!
                    </div>
                }
                @if (registroInvalido)
                {
                    <div class="alert alert-danger" role="alert">
                        Registro invalido. Intentelo nuevamente!
                    </div>
                }
                <!--seccion login-->

                <div class="card mt-4">
                    <div class="card-body">
                        <h3 class="card-title">Iniciar Cesion</h3>
                        <EditForm Model="@logInModel" OnValidSubmit="@LogIn">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <InputText @bind-Value="logInModel.nombre" class="form-control"
                                    placeholder="Nombre de Usuario" />
                                <ValidationMessage For="@(() => logInModel.nombre)" />
                            </div>
                            <div class="mb-3">
                                <InputText @bind-Value="logInModel.password" class="form-control"
                                    placeholder="Contraseña" type="password" />
                                <ValidationMessage For="@(() => logInModel.password)" />
                            </div>
                            <button type="submit" class="btn btn-success btn-block">Ingresar</button>
                            <button type="button" class="btn btn-warning btn-block" @onclick="LogOut">LogOut</button>
                        </EditForm>
                    </div>
                </div>
                @if (loginExitoso)
                {
                    <div class="alert alert-success" role="alert">
                        LogIn exitoso. ¡Enhorabuena!
                    </div>
                }
                @if (loginInvalido)
                {
                    <div class="alert alert-danger" role="alert">
                        LogIn invalido. Intentelo nuevamente!
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@code {
    //utilidades para el bloque html
    // Aquí puedes incluir tu lógica para obtener las imágenes dinámicamente
    List<string> imageUrls = new List<string>
{
"https://images.unsplash.com/photo-1542831371-29b0f74f9713?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8Y29kaW5nfGVufDB8fDB8fHww",
"https://www.ucatalunya.edu.co/img/blog/los-mejores-lenguajes-de-programacion-en-el-desarrollo-web-y-su-importancia-en-la-era-digital.jpg",
"https://cronicasfreelancer.com/wp-content/uploads/2019/03/programador-1024x724.jpg"
// Agrega otras URLs de imágenes si es necesario
};

    private FrontCursos.Services.ApiService apiService;
    private FrontCursos.Services.JwtManagementService jwtManagementService; 
    private FrontCursos.Models.RegUser registerModel = new FrontCursos.Models.RegUser();
    private FrontCursos.Models.LogIn logInModel = new FrontCursos.Models.LogIn();
    private bool registroExitoso = false;
    private bool registroInvalido = false;
    private bool loginExitoso = false;
    private bool loginInvalido = false;
    public bool IsAuthenticated { get; private set; }

    [Inject]
    private HttpClient HttpClient { get; set; }

    protected override void OnInitialized()
    {
        apiService = new FrontCursos.Services.ApiService(HttpClient);
        jwtManagementService = new FrontCursos.Services.JwtManagementService();
        IsAuthenticated = false;
    }

    private async Task RegisterUser()
    {
        try
        {
            bool verify = await apiService.Register(registerModel);
            if (verify)
            {
                registroExitoso = true;
                registerModel = new FrontCursos.Models.RegUser(); // Reiniciar el modelo
            }
            else
            {
                registroInvalido = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al registrar usuario: {ex.Message}");
        }
    }

    private async Task LogIn()
    {
        //en desarrollo
        try
        {   
            TokenModel tokenModel = await apiService.LogIn(logInModel);
            jwtManagementService.SetJwtToken(tokenModel);
            if (tokenModel.isAuthenticated)
            {
                loginExitoso = true;
                IsAuthenticated = tokenModel.isAuthenticated;
                AuthService.SetAuthentication(true);
                logInModel = new FrontCursos.Models.LogIn(); // Reiniciar el modelo
            }
            else
            {
                loginInvalido = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en el LogIn usuario: {ex.Message}");
        }
    }
    private async Task LogOut()
    {
        AuthService.SetAuthentication(false);
    }
}
